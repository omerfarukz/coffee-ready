{"version":3,"sources":["../test/subscribe.test.ts"],"names":[],"mappings":"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","file":"subscribe.test.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from 'chai';\nimport * as sinon from 'sinon';\nimport {\n  async,\n  CompleteFn,\n  createSubscribe,\n  ErrorFn,\n  NextFn,\n  Observer,\n  Subscribe,\n  Unsubscribe\n} from '../src/subscribe';\n\ndescribe('createSubscribe', function() {\n  let spy: any;\n  beforeEach(() => {\n    // Listen to console.error calls.\n    spy = sinon.spy(console, 'error');\n  });\n\n  afterEach(() => {\n    spy.restore();\n  });\n\n  it('Creation', done => {\n    let subscribe = createSubscribe<number>(\n      (observer: Observer<number, Error>) => {\n        observer.next(123);\n      }\n    );\n\n    let unsub = subscribe((value: number) => {\n      unsub();\n      assert.equal(value, 123);\n      done();\n    });\n  });\n\n  it('Logging observer error to console', done => {\n    let uncatchableError = new Error('uncatchable');\n    let subscribe = createSubscribe<number>(\n      (observer: Observer<number, Error>) => {\n        observer.next(123);\n        observer.complete();\n      }\n    );\n\n    subscribe({\n      next(value) {\n        assert.equal(value, 123);\n        // Simulate an error is thrown in the next callback.\n        // This should log to the console as an error.\n        throw uncatchableError;\n      },\n      complete() {\n        // By this point, the error should have been logged.\n        assert.ok(spy.calledWith(uncatchableError));\n        done();\n      }\n    });\n  });\n\n  it('Well-defined subscription order', done => {\n    let subscribe = createSubscribe<number>(observer => {\n      observer.next(123);\n      // Subscription after value emitted should NOT be received.\n      subscribe({\n        next(value) {\n          assert.ok(false);\n        }\n      });\n    });\n    // Subscription before value emitted should be recieved.\n    subscribe({\n      next(value) {\n        done();\n      }\n    });\n  });\n\n  it('Subscribing to already complete Subscribe', done => {\n    let seq = 0;\n    let subscribe = createSubscribe<number>(observer => {\n      observer.next(456);\n      observer.complete();\n    });\n    subscribe({\n      next(value: number) {\n        assert.equal(seq++, 0);\n        assert.equal(value, 456);\n      },\n      complete() {\n        subscribe({\n          complete() {\n            assert.equal(seq++, 1);\n            done();\n          }\n        });\n      }\n    });\n  });\n\n  it('Subscribing to errored Subscribe', done => {\n    let seq = 0;\n    let subscribe = createSubscribe<number>(observer => {\n      observer.next(246);\n      observer.error(new Error('failure'));\n    });\n    subscribe({\n      next(value: number) {\n        assert.equal(seq++, 0);\n        assert.equal(value, 246);\n      },\n      error(e) {\n        assert.equal(seq++, 1);\n        subscribe({\n          error(e2) {\n            assert.equal(seq++, 2);\n            assert.equal(e.message, 'failure');\n            done();\n          }\n        });\n      },\n      complete() {\n        assert.ok(false);\n      }\n    });\n  });\n\n  it('Delayed value', done => {\n    let subscribe = createSubscribe<number>(\n      (observer: Observer<number, Error>) => {\n        setTimeout(() => observer.next(123), 10);\n      }\n    );\n\n    subscribe((value: number) => {\n      assert.equal(value, 123);\n      done();\n    });\n  });\n\n  it('Executor throws => Error', () => {\n    // It's an application error to throw an exception in the executor -\n    // but since it is called asynchronously, our only option is\n    // to emit that Error and terminate the Subscribe.\n    let subscribe = createSubscribe<number>(\n      (observer: Observer<number, Error>) => {\n        throw new Error('Executor throws');\n      }\n    );\n    subscribe({\n      error(e) {\n        assert.equal(e.message, 'Executor throws');\n      }\n    });\n  });\n\n  it('Sequence', done => {\n    let subscribe = makeCounter(10);\n\n    let j = 1;\n    subscribe({\n      next(value: number) {\n        assert.equal(value, j++);\n      },\n      complete() {\n        assert.equal(j, 11);\n        done();\n      }\n    });\n  });\n\n  it('unlisten', done => {\n    let subscribe = makeCounter(10);\n\n    subscribe({\n      complete: () => {\n        async(done)();\n      }\n    });\n\n    let j = 1;\n    let unsub = subscribe({\n      next: (value: number) => {\n        assert.ok(value <= 5);\n        assert.equal(value, j++);\n        if (value === 5) {\n          unsub();\n        }\n      },\n      complete: () => {\n        assert.ok(false, 'Does not call completed if unsubscribed');\n      }\n    });\n  });\n\n  it('onNoObservers', done => {\n    let subscribe = makeCounter(10);\n\n    let j = 1;\n    let unsub = subscribe({\n      next: (value: number) => {\n        assert.ok(value <= 5);\n        assert.equal(value, j++);\n        if (value === 5) {\n          unsub();\n          async(done)();\n        }\n      },\n      complete: () => {\n        assert.ok(false, 'Does not call completed if unsubscribed');\n      }\n    });\n  });\n\n  // TODO(koss): Add test for partial Observer (missing methods).\n  it('Partial Observer', done => {\n    let subscribe = makeCounter(10);\n\n    let unsub = subscribe({\n      complete: () => {\n        done();\n      }\n    });\n  });\n});\n\nfunction makeCounter(maxCount: number, ms = 10): Subscribe<number> {\n  let id: any;\n\n  return createSubscribe<number>(\n    (observer: Observer<number, Error>) => {\n      let i = 1;\n      id = setInterval(() => {\n        observer.next(i++);\n        if (i > maxCount) {\n          if (id) {\n            clearInterval(id);\n            id = undefined;\n          }\n          observer.complete();\n        }\n      }, ms);\n    },\n    (observer: Observer<number, Error>) => {\n      clearInterval(id);\n      id = undefined;\n    }\n  );\n}\n"]}