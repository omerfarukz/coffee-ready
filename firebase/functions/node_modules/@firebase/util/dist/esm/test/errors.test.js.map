{"version":3,"sources":["../test/errors.test.ts"],"names":[],"mappings":"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","file":"errors.test.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from 'chai';\nimport { ErrorFactory, ErrorList, patchCapture } from '../src/errors';\n\ntype Err = 'generic-error' | 'file-not-found' | 'anon-replace';\n\nlet errors = {\n  'generic-error': 'Unknown error',\n  'file-not-found': \"Could not find file: '{$file}'\",\n  'anon-replace': 'Hello, {$repl_}!'\n} as ErrorList<Err>;\n\nlet error = new ErrorFactory<Err>('fake', 'Fake', errors);\n\ndescribe('FirebaseError', () => {\n  it('create', () => {\n    let e = error.create('generic-error');\n    assert.equal(e.code, 'fake/generic-error');\n    assert.equal(e.message, 'Fake: Unknown error (fake/generic-error).');\n  });\n\n  it('String replacement', () => {\n    let e = error.create('file-not-found', { file: 'foo.txt' });\n    assert.equal(e.code, 'fake/file-not-found');\n    assert.equal(\n      e.message,\n      \"Fake: Could not find file: 'foo.txt' (fake/file-not-found).\"\n    );\n    assert.equal((e as any).file, 'foo.txt');\n  });\n\n  it('Anonymous String replacement', () => {\n    let e = error.create('anon-replace', { repl_: 'world' });\n    assert.equal(e.code, 'fake/anon-replace');\n    assert.equal(e.message, 'Fake: Hello, world! (fake/anon-replace).');\n    assert.isUndefined((e as any).repl_);\n  });\n\n  it('Missing template', () => {\n    // Cast to avoid compile-time error.\n    let e = error.create(('no-such-code' as any) as Err);\n    assert.equal(e.code, 'fake/no-such-code');\n    assert.equal(e.message, 'Fake: Error (fake/no-such-code).');\n  });\n\n  it('Missing replacement', () => {\n    let e = error.create('file-not-found', { fileX: 'foo.txt' });\n    assert.equal(e.code, 'fake/file-not-found');\n    assert.equal(\n      e.message,\n      \"Fake: Could not find file: '<file?>' (fake/file-not-found).\"\n    );\n  });\n});\n\n// Run the stack trace tests with, and without, Error.captureStackTrace\nlet realCapture = patchCapture();\nstackTests(realCapture);\nstackTests(undefined);\n\nfunction stackTests(fakeCapture: any) {\n  let saveCapture: any;\n\n  describe(\n    'Error#stack tests - Error.captureStackTrace is ' +\n      (fakeCapture ? 'defined' : 'NOT defined'),\n    () => {\n      before(() => {\n        saveCapture = patchCapture(fakeCapture);\n      });\n\n      after(() => {\n        patchCapture(saveCapture);\n      });\n\n      it('has stack', () => {\n        let e = error.create('generic-error');\n        // Multi-line match trick - .* does not match \\n\n        assert.match(e.stack, /FirebaseError[\\s\\S]/);\n      });\n\n      it('stack frames', () => {\n        try {\n          dummy1();\n          assert.ok(false);\n        } catch (e) {\n          assert.match(e.stack, /dummy2[\\s\\S]*?dummy1/);\n        }\n      });\n    }\n  );\n}\n\nfunction dummy1() {\n  dummy2();\n}\n\nfunction dummy2() {\n  let error = new ErrorFactory<Err>('dummy', 'Dummy', errors);\n  throw error.create('generic-error');\n}\n"]}